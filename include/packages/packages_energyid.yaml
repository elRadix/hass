---
input_datetime:
  gas_last:
    has_date: true
    has_time: true
  water_last:
    has_date: true
    has_time: true
  electricity_day_last:
    has_date: true
    has_time: true
  electricity_night_last:
    has_date: true
    has_time: true
  meter_start:  # 31/01/2018 pidpa
    has_date: true
    has_time: true
  water_start:  #24/11/2018 mega
    has_date: true
    has_time: true

input_text:
  gas_last:
    name: "gas_last"
  water_last:
    name: "water_last"
  electricity_day_last:
    name: "electricity_day_last"
  electricity_night_last:
    name: "electricity_night_last"

input_number:
  gas_last:
    name: gas last
    icon: mdi:counter
    min: 5770
    max: 7000
    step: 0.001
    mode: box
  water_last:
    name: water last
    icon: mdi:counter
    min: 821
    max: 5000
    step: 0.001
    mode: box
  electricity_day_last:
    name: day last
    icon: mdi:counter
    min: 14284
    max: 17000
    step: 0.001
    mode: box
  electricity_night_last:
    name: night last
    icon: mdi:counter
    min: 16848
    max: 18500
    step: 0.001
    mode: box

sensor:

# Bereken aantal dagen
  - platform: template
    sensors:
      days_consumed:
        friendly_name: "Days consumed"
        value_template: '{{ (((as_timestamp(now())-states.input_datetime.meter_start.attributes.timestamp)) | int /60/1440) | round(0) }}'
        unit_of_measurement: 'days'
        entity_id: input_datetime.meter_start,sensor.time

  - platform: template
    sensors:
      days_water_consumed:
        friendly_name: "Days consumed"
        value_template: '{{ (((as_timestamp(now())-states.input_datetime.water_start.attributes.timestamp)) | int /60/1440) | round(0) }}'
        unit_of_measurement: 'days'
        entity_id: input_datetime.datum_eindafrekening,sensor.time
#period power + water

  - platform: template
    sensors:
      water_period:
        entity_id: sensor.date
        friendly_name: water period
        value_template: >-
            {% set date = 'December 2018' %}
            {% set date = strptime(date, '%B %Y') %}
            {% set today = now() %}
            {{ today.year*12+today.month - (date.year*12+date.month) - 1 }}
  - platform: template
    sensors:
      power_period:
        entity_id: sensor.date
        friendly_name: power period
        value_template: >-
            {% set date = 'January 2019' %}
            {% set date = strptime(date, '%B %Y') %}
            {% set today = now() %}
            {{ today.year*12+today.month - (date.year*12+date.month) - 1 }}

#consumption in m3 / kwh
  - platform: template
    sensors:
     water_consumption_period:
       friendly_name: water consumption period
       value_template: "{{ (states('sensor.water_last')|float - states('sensor.water_start')|float) |round(2) }}"
       unit_of_measurement: 'm3'
  - platform: template
    sensors:
      gas_consumption_period:
        friendly_name: gas consumption period
        value_template: "{{ (states('sensor.gas_last')|float - states('sensor.gas_start')|float) |round(2) }}"
        unit_of_measurement: 'm3'
  - platform: template
    sensors:
      gas_consumption_period_kwh:
        friendly_name: gas consumption period kwh
        value_template: "{{ ((states('sensor.gas_last')|float - states('sensor.gas_start')|float) *  10.15 ) |float |round(0) }}"
        unit_of_measurement: 'kWh'
  - platform: template
    sensors:
      electricity_day_consumption_period:
        friendly_name: electricity day consumption period
        value_template: "{{ (states('sensor.electricity_day_last')|float - states('sensor.electricity_day_start')|float) |round(2) }}"
        unit_of_measurement: 'kWh'
  - platform: template
    sensors:
      electricity_night_consumption_period:
        friendly_name: electricity night consumption period
        value_template: "{{ (states('sensor.electricity_night_last')|float - states('sensor.electricity_night_start')|float) |round(2) }}"
        unit_of_measurement: 'kWh'
  - platform: template
    sensors:
      electricity_total_consumption_period:
        friendly_name: electricity total consumption period
        value_template: "{{ (states('sensor.electricity_day_consumption_period')|float + states('sensor.electricity_night_consumption_period')|float) |round(2) }}"
        unit_of_measurement: 'kWh'

#consumption utilities - per day
  - platform: template
    sensors:
     water_consumption_day:
       friendly_name: water daily
       value_template: "{{ ((states('sensor.water_consumption_period')|float / states('sensor.days_water_consumed')|float) *  1000 ) |float |round(0) }}"
       unit_of_measurement: 'liter'
  - platform: template
    sensors:
      gas_consumption_day_kwh:
        friendly_name: gas daily
        value_template: "{{ ((states('sensor.gas_consumption_period')|float / states('sensor.days_consumed')|float) *  10.15 ) |float |round(0) }}"
        unit_of_measurement: 'kWh'
  - platform: template
    sensors:
      gas_consumption_day:
        friendly_name: gas daily
        value_template: "{{ (states('sensor.gas_consumption_period')|float / states('sensor.days_consumed')|float) |round(2) }}"
        unit_of_measurement: 'm3'
  - platform: template
    sensors:
      electricity_day_consumption_day:
        friendly_name: electricity day daily
        value_template: "{{ (states('sensor.electricity_day_consumption_period')|float / states('sensor.days_consumed')|float) |round(2) }}"
        unit_of_measurement: 'kWh'
  - platform: template
    sensors:
      electricity_night_consumption_day:
        friendly_name: electricity night daily
        value_template: "{{ (states('sensor.electricity_night_consumption_period')|float / states('sensor.days_consumed')|float) |round(2) }}"
        unit_of_measurement: 'kWh'
  - platform: template
    sensors:
      electricity_total_consumption_day:
        friendly_name: electricity daily
        value_template: "{{ (states('sensor.electricity_total_consumption_period')|float / states('sensor.days_consumed')|float) |round(2) }}"
        unit_of_measurement: 'kWh'

  - platform: template
    sensors:
      gas_day_forecast:
        friendly_name: gas monhtly
        value_template: >-
            {% set a = states('sensor.gas_consumption_day')|float %}
            {% set b = states('sensor.gas_cost_monthly')|float %}
            {{  (((a * 365 ) /12 ))|float |round(2)  }}


#prepaid utilities

  - platform: template
    sensors:
      power_prepaid_monthly:
        friendly_name: power prepaid monthly
        value_template: "{{ (states('sensor.electricity_total_prepaid_monthly')|float + states('sensor.gas_prepaid_monthly')|float) |round(2)}}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      water_prepaid_period:
        friendly_name: water prepaid period
        value_template: "{{ ((states.sensor.water_prepaid_monthly.state|float) * (states.sensor.water_period.state|float)) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      gas_prepaid_period:
        friendly_name: gas prepaid period
        value_template: "{{ ((states.sensor.gas_prepaid_monthly.state|float) * (states.sensor.power_period.state|float)) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      electricity_total_prepaid_period:
        friendly_name: electricity total prepaid period
        value_template: "{{ ((states.sensor.electricity_total_prepaid_monthly.state|float) * (states.sensor.power_period.state|float)) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      power_prepaid_period:
        friendly_name: power prepaid period
        value_template: "{{ ((states.sensor.power_prepaid_monthly.state|float) * (states.sensor.power_period.state|float)) |round(2) }}"
        unit_of_measurement: 'eur'

# utilities cost - actuals

  - platform: template
    sensors:
     water_cost_period:
       friendly_name: water cost period
       value_template: "{{ (states('sensor.water_consumption_period')|float * 3.8 ) |round(2) }}"
       unit_of_measurement: 'eur'
  - platform: template
    sensors:
      gas_cost_period:
        friendly_name: gas cost period
        value_template: "{{ (states('sensor.gas_consumption_period')|float * 10.15 * 0.0674190647482014) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      electricity_day_cost_period:
        friendly_name: electricity day cost period
        value_template: "{{ (states('sensor.electricity_day_consumption_period')|float * 0.26574780058651) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
     electricity_night_cost_period:
        friendly_name: electricity night cost period
        value_template: "{{ (states('sensor.electricity_night_consumption_period')|float * 0.26574780058651) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      electricity_total_cost_period:
        friendly_name: electricity total cost period
        value_template: "{{ (states('sensor.electricity_day_cost_period')|float + states('sensor.electricity_night_cost_period')|float) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      power_cost_period:
        friendly_name: power period
        value_template: "{{ (states('sensor.electricity_total_cost_period')|float + states('sensor.gas_cost_period')|float) |round(2)}}"
        unit_of_measurement: 'eur'

#utilities cost analysis

  - platform: template
    sensors:
      water_cost_monthly:
        friendly_name: water cost monthly
        value_template: "{{ ((states.sensor.water_cost_period.state|float) / (states.sensor.water_period.state|float)) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      gas_cost_monthly:
        friendly_name: gas cost monthly
        value_template: "{{ ((states.sensor.gas_cost_period.state|float) / (states.sensor.power_period.state|float)) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      electricity_total_cost_monthly:
        friendly_name: electricity total cost monthly
        value_template: "{{ ((states.sensor.electricity_total_cost_period.state|float) / (states.sensor.power_period.state|float)) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      power_cost_monthly:
        friendly_name: power cost monthly
        value_template: "{{ ((states.sensor.power_cost_period.state|float) / (states.sensor.power_period.state|float)) |round(2) }}"
        unit_of_measurement: 'eur'

# utilities analys balance period
  - platform: template
    sensors:
      water_balance_period:
        friendly_name: water balance period
        value_template: "{{ (states('sensor.water_prepaid_period')|float - states('sensor.water_cost_period')|float) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      gas_balance_period:
        friendly_name: gas balance period
        value_template: "{{ (states('sensor.gas_prepaid_period')|float - states('sensor.gas_cost_period')|float) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      gas_balance_period_tweaked:
        friendly_name: gas cost period tweaked
        value_template: >-
            {% set consumption = states('sensor.gas_consumption_day') |float %}
            {% set days = states('sensor.days_consumed') |float %}
            {% set price = 0.0674190647482014 |float %}
            {% set conversion = 10.15 |float %}
            {% set prepaid = states('sensor.gas_prepaid_monthly') |float %}
            {% set cost =  (((consumption * days ) * conversion * price ))|float |round(2) %}
            {% set prepaid_day =  (((prepaid *12 /365) * days )) |float |round(2) %}
            {{  (prepaid_day - cost )  |float |round(2)  }}
        unit_of_measurement: 'eur'

  - platform: template
    sensors:
      gas_cost_period_tweaked:
        friendly_name: gas cost period tweaked
        value_template: >-
            {% set day = states('sensor.gas_consumption_day')|float %}
            {% set consumed = states('sensor.days_consumed')|float %}
            {% set price = 0.0674190647482014 |float %}
            {% set conversion = 10.15 |float %}
            {% set cost =  (((day * consumed )  * conversion * price ))|float |round(2) %}
            {{  (cost )  |float |round(2)  }}
        unit_of_measurement: 'eur'

  - platform: template
    sensors:
      electricity_total_balance_period:
        friendly_name: electricity total balance period
        value_template: "{{ (states('sensor.electricity_total_prepaid_period')|float - states('sensor.electricity_total_cost_period')|float) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      power_balance_period:
        friendly_name: power balance period
        value_template: "{{ (states('sensor.power_prepaid_period')|float - states('sensor.power_cost_period')|float) |round(2) }}"
        unit_of_measurement: 'eur'
# fcst
  - platform: template
    sensors:
      water_balance_fcst:
        friendly_name: gas fcst
        value_template: >-
            {% set a = states('sensor.water_prepaid_monthly')|float %}
            {% set b = states('sensor.water_cost_monthly')|float %}
            {{  (((a * 12 ) - (b  * 12)))|float |round(2)  }}
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      gas_balance_fcst:
        friendly_name: gas fcst
        value_template: >-
            {% set a = states('sensor.gas_prepaid_monthly')|float %}
            {% set b = states('sensor.gas_cost_monthly')|float %}
            {{  (((a * 12 ) - (b  * 12)))|float |round(2)  }}
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      gas_balance_fcst_tweaked:
        friendly_name: gas cost period tweaked
        value_template: >-
            {% set consumption = states('sensor.gas_consumption_day') |float %}
            {% set days = states('sensor.days_consumed') |float %}
            {% set price = 0.0674190647482014 |float %}
            {% set conversion = 10.15 |float %}
            {% set prepaid = states('sensor.gas_prepaid_monthly') |float %}
            {% set cost =  (((consumption * days ) * conversion * price ))|float |round(2) %}
            {% set prepaid_day =  (((prepaid *12 /365) * days )) |float |round(2) %}
            {% set gas_balance = (prepaid_day - cost )  |float |round(2) %}
            {{  (gas_balance / days * 365 )  |float |round(2)  }}
        unit_of_measurement: 'eur'

  - platform: template
    sensors:
      electricity_total_balance_fcst:
        friendly_name: electricity fcst
        value_template: >-
            {% set a = states('sensor.electricity_total_prepaid_monthly')|float %}
            {% set b = states('sensor.electricity_total_cost_monthly')|float %}
            {{  (((a * 12 ) - (b  * 12)))|float |round(2)  }}
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      power_balance_fcst:
        friendly_name: power balance fcst
        value_template: >-
            {% set a = states('sensor.electricity_total_balance_fcst')|float %}
            {% set b = states('sensor.gas_balance_fcst')|float %}
            {{  (a + b)|float |round(2)  }}
        unit_of_measurement: 'eur'

rest_command:
  post_gas:
    url: !secret webhook_energyid
    method: POST
    payload: '{"meterId": "6f190ba2-247d-4c86-9019-bb67ed023eb1","data": [["{{ states.input_datetime.gas_last.state }}", {{ states.input_number.gas_last.state }}]]}'
    content_type: application/json
    verify_ssl: true
  post_water:
    url: !secret webhook_energyid
    method: POST
    payload: '{"meterId": "c66a0c47-4937-4d76-b650-658588900b66", "data": [["{{ states.input_datetime.water_last.state }}", {{ states.input_number.water_last.state }}]]}'
    content_type: application/json
    verify_ssl: true
  post_electricity_day:
    url: !secret webhook_energyid
    method: POST
    payload: '{"meterId": "9677c2f3-5eff-431c-9423-a9ac8f3e9d82", "data": [["{{ states.input_datetime.electricity_day_last.state }}", {{ states.input_number.electricity_day_last.state }}]]}'
    content_type: application/json
    verify_ssl: true
  post_electricity_night:
    url: !secret webhook_energyid
    method: POST
    payload: '{"meterId": "234731ea-0276-4d3c-a9c9-9d333ec0d189", "data": [["{{ states.input_datetime.electricity_night_last.state }}", {{ states.input_number.electricity_night_last.state }}]]}'
    content_type: application/json
    verify_ssl: true


automation:
  - id: energyid_01
    alias: post energyid gas
    trigger:
    - platform: state
      entity_id: input_text.gas_last
    action:
    - service: input_datetime.set_datetime
      entity_id: input_datetime.gas_last
      data_template:
        datetime: "{{ utcnow() }}"
    - service: input_number.set_value
      data_template:
        entity_id: input_number.gas_last
        value: "{{ states('input_text.gas_last') }}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.date_gas_last
        value: "{{ states('input_datetime.gas_last') }}"
    - service: python_script.set_state
      data_template:
        entity_id: sensor.gas_last
        state: "{{ states('input_text.gas_last') }}"
        unit_of_measurement: 'm3'
        icon: mdi:counter
        date: "{{ states.input_datetime.gas_last.state }}"
        source: https://www.energyid.eu
    - service: rest_command.post_gas

  - id: energyid_02
    alias: post energyid water
    trigger:
    - platform: state
      entity_id: input_text.water_last
    action:
    - service: input_datetime.set_datetime
      entity_id: input_datetime.water_last
      data_template:
        datetime: "{{ utcnow() }}"
    - service: input_number.set_value
      data_template:
        entity_id: input_number.water_last
        value: "{{ states('input_text.water_last') }}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.date_water_last
        value: "{{ states('input_datetime.water_last') }}"
    - service: python_script.set_state
      data_template:
        entity_id: sensor.water_last
        state: "{{ states('input_text.water_last') }}"
        unit_of_measurement: 'm3'
        icon: mdi:counter
        date:  "{{ states.input_datetime.water_last.state }}"
        source: https://www.energyid.eu
    - service: rest_command.post_water

  - id: energyid_03
    alias: post energyid e day
    trigger:
    - platform: state
      entity_id: input_text.electricity_day_last
    action:
    - service: input_datetime.set_datetime
      entity_id: input_datetime.electricity_day_last
      data_template:
        datetime: "{{ utcnow() }}"
    - service: input_number.set_value
      data_template:
        entity_id: input_number.electricity_day_last
        value: "{{ states('input_text.electricity_day_last') }}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.date_electricity_day_last
        value: "{{ states('input_datetime.electricity_day_last') }}"
    - service: python_script.set_state
      data_template:
        entity_id: sensor.electricity_day_last
        state: "{{ states('input_text.electricity_day_last') }}"
        unit_of_measurement: 'kWh'
        icon: mdi:counter
        date: "{{ states.input_datetime.electricity_day_last.state }}"
        source: https://www.energyid.eu
    - service: rest_command.post_electricity_day

  - id: energyid_04
    alias: post energyid e night
    trigger:
    - platform: state
      entity_id: input_text.electricity_night_last
    action:
    - service: input_datetime.set_datetime
      entity_id: input_datetime.electricity_night_last
      data_template:
        datetime: "{{ utcnow() }}"
    - service: input_number.set_value
      data_template:
        entity_id: input_number.electricity_night_last
        value: "{{ states('input_text.electricity_night_last') }}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.date_electricity_night_last
        value: "{{ states('input_datetime.electricity_night_last') }}"
    - service: python_script.set_state
      data_template:
        entity_id: sensor.electricity_night_last
        state: "{{ states('input_text.electricity_night_last') }}"
        unit_of_measurement: 'kWh'
        icon: mdi:counter
        date: "{{ states.input_datetime.electricity_night_last.state }}"
        source: https://www.energyid.eu
    - service: rest_command.post_electricity_night

  - id: energyid_05
    initial_state: 'true'
    alias: start utility meters
    trigger:
      platform: homeassistant
      event: start
    action:
    - service: python_script.set_state
      data_template:
        entity_id: sensor.electricity_total_prepaid_monthly
        state: 45.31
        unit_of_measurement: 'eur'
        icon: mdi:counter
        start_date: 01/02/2019
    - service: python_script.set_state
      data_template:
        entity_id: sensor.gas_prepaid_monthly
        state: 24.99
        unit_of_measurement: 'eur'
        icon: mdi:counter
        start_date: 01/02/2019
    - service: python_script.set_state
      data_template:
        entity_id: sensor.water_prepaid_monthly
        state: 27.33
        unit_of_measurement: 'eur'
        icon: mdi:counter
        start_date: 1/3/2019
    - service: python_script.set_state
      data_template:
        entity_id: sensor.gas_start
        state: 5612
        unit_of_measurement: 'm3'
        icon: mdi:counter
        start_date: 01/02/2019
    - service: python_script.set_state
      data_template:
        entity_id: sensor.water_start
        unit_of_measurement: 'm3'
        icon: mdi:counter
        state: 781
        start_date: 27/10/2018
    - service: python_script.set_state
      data_template:
        entity_id: sensor.electricity_day_start
        state: 13915
        unit_of_measurement: 'kWh'
        icon: mdi:counter
        start_date: 01/02/2019
    - service: python_script.set_state
      data_template:
        entity_id: sensor.electricity_night_start
        unit_of_measurement: 'kWh'
        icon: mdi:counter
        state: 16218
        start_date: 01/02/2019
    - service: python_script.set_state
      data_template:
        entity_id: sensor.electricity_night_last
        state: "{{ states('input_text.electricity_night_last') }}"
        unit_of_measurement: 'kWh'
        icon: mdi:counter
        date: "{{ states.input_text.date_electricity_night_last.state }}"
        source: https://www.energyid.eu
    - service: python_script.set_state
      data_template:
        entity_id: sensor.electricity_day_last
        state: "{{ states('input_text.electricity_day_last') }}"
        unit_of_measurement: 'kWh'
        icon: mdi:counter
        date: "{{ states.input_text.date_electricity_day_last.state }}"
        source: https://www.energyid.eu
    - service: python_script.set_state
      data_template:
        entity_id: sensor.water_last
        state: "{{ states('input_text.water_last') }}"
        unit_of_measurement: 'm3'
        icon: mdi:counter
        date:  "{{ states.input_text.date_water_last.state }}"
        source: https://www.energyid.eu
    - service: python_script.set_state
      data_template:
        entity_id: sensor.gas_last
        state: "{{ states('input_text.gas_last') }}"
        unit_of_measurement: 'm3'
        icon: mdi:counter
        date: "{{ states.input_text.date_gas_last.state }}"
        source: https://www.energyid.eu
