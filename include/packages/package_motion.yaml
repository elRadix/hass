---
##########################################################################################
# Inputs
# https://diyfuturism.com/index.php/2017/12/15/useful-sensor-motion-last-seen-________/
##########################################################################################

variable:
  last_motion:
    value: 'Not set'
    restore: true
    attributes:
      icon: mdi:map-marker
      friendly_name: 'Last Motion'

binary_sensor:
  - platform: template
    sensors:
      eetkamer_occupied:
        value_template: >
          {{
            is_state('timer.eetkamer_occupied','active')
            or is_state('binary_sensor.motion_eetkamer','on')
          }}
        device_class: occupancy
        delay_off: 2

  - platform: template
    sensors:
      inkomhal_occupied:
        value_template: >
          {{
            is_state('timer.inkomhal_occupied','active')
            or is_state('binary_sensor.motion_inkomhal','on')
          }}
        device_class: occupancy
        delay_off: 2

  - platform: template
    sensors:
      wc_occupied:
        value_template: >
          {{
            is_state('timer.wc_occupied','active')
            or is_state('binary_sensor.motion_wc','on')
          }}
        device_class: occupancy
        delay_off: 2

  - platform: template
    sensors:
      traphal_occupied:
        value_template: >
          {{
            is_state('timer.traphal_occupied','active')
            or is_state('binary_sensor.motion_traphal','on')
          }}
        device_class: occupancy
        delay_off: 2

  - platform: template
    sensors:
      badkamer_occupied:
        value_template: >
          {{
            is_state('timer.bad_occupied','active')
            or is_state('binary_sensor.motion_badkamer','on')
          }}
        device_class: occupancy
        delay_off: 2

timer:
  eetkamer_occupied:
    duration: '00:10:00'
  inkomhal_occupied:
    duration: '00:05:00'
  wc_occupied:
    duration: '00:01:30'
  traphal_occupied:
    duration: '00:05:00'
  bad_occupied:
    duration: '00:05:00'
  inkomhal_motion:
    duration: '00:00:15'
  traphal_motion:
    duration: '00:00:30'

automation:

# Update Last Motion variable
  - alias: 'Update Last Motion'
    id: 'Update Last Motion'
#    initial_state: 'on'
    trigger:
      platform: state
      entity_id:
        - binary_sensor.motion_inkomhal
        - binary_sensor.motion_eetkamer
        - binary_sensor.motion_wc
        - binary_sensor.motion_traphal
        - binary_sensor.motion_badkamer
      to: 'on'
    action:
      service: variable.set_variable
      data:
        variable: last_motion
        attributes_template: >
          {
                "history_1": "{{ variable.state }}",
                "history_2": "{{ variable.attributes.history_1 }}",
                "history_3": "{{ variable.attributes.history_2 }}",
                "history_4": "{{ variable.attributes.history_3 }}",
                "history_5": "{{ variable.attributes.history_4 }}",
                "history_6": "{{ variable.attributes.history_5 }}",
                "history_7": "{{ variable.attributes.history_6 }}",
                "history_8": "{{ variable.attributes.history_7 }}",
                "history_9": "{{ variable.attributes.history_8 }}",
                "history_10": "{{ variable.attributes.history_9 }}"
          }
      data_template:
        value: >
          {{ trigger.to_state.attributes.friendly_name|replace('motion sensor','') }}:
          {{as_timestamp(states.variable.last_motion.last_changed)| timestamp_custom('%X') }}

# start or stop timer on motion day or night

  - id: motion_occupied_on_eetkamer_occupied
    alias: motion_occupied_on_eetkamer_occupied
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id:  binary_sensor.eetkamer_occupied
      to: 'on'
    action:
    - service: timer.start
      data:
        entity_id: timer.eetkamer_occupied

  - id: motion_occupied_off_eetkamer_occupied
    alias: motion_occupied_off_eetkamer_occupied
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id:  binary_sensor.eetkamer_occupied
      to: 'off'
    action:
    - service: timer.cancel
      data:
        entity_id: timer.eetkamer_occupied

  - id: motion_occupied_on_inkomhal_occupied
    alias: motion_occupied_on_inkomhal_occupied
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id:  binary_sensor.inkomhal_occupied
      to: 'on'
    action:
    - service: timer.start
      data:
        entity_id: timer.inkomhal_occupied

  - id: motion_occupied_off_inkomhal_occupied
    alias: motion_occupied_off_inkomhal_occupied
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id:  binary_sensor.inkomhal_occupied
      to: 'off'
    action:
    - service: timer.cancel
      data:
        entity_id: timer.inkomhal_occupied

  - id: motion_occupied_on_wc_occupied
    alias: motion_occupied_on_wc_occupied
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id:  binary_sensor.wc_occupied
      to: 'on'
    action:
    - service: timer.start
      data:
        entity_id: timer.wc_occupied

  - id: motion_occupied_off_wc_occupied
    alias: motion_occupied_off_wc_occupied
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id:  binary_sensor.wc_occupied
      to: 'off'
    action:
    - service: timer.cancel
      data:
        entity_id: timer.wc_occupied

  - id: motion_occupied_on_traphal_occupied
    alias: motion_occupied_on_traphal_occupied
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id:  binary_sensor.traphal_occupied
      to: 'on'
    action:
    - service: timer.start
      data:
        entity_id: timer.traphal_occupied

  - id: motion_occupied_off_traphal_occupied
    alias: motion_occupied_off_traphal_occupied
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id:  binary_sensor.traphal_occupied
      to: 'off'
    action:
    - service: timer.cancel
      data:
        entity_id: timer.traphal_occupied

  - id: motion_occupied_on_bad_occupied
    alias: motion_occupied_on_bad_occupied
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id:  binary_sensor.badkamer_occupied
      to: 'on'
    action:
    - service: timer.start
      data:
        entity_id: timer.bad_occupied

  - id: motion_occupied_off_bad_occupied
    alias: motion_occupied_bad_occupied
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id:  binary_sensor.badkamer_occupied
      to: 'off'
    action:
    - service: timer.cancel
      data:
        entity_id: timer.bad_occupied


# perform actions on ie lights on or off

  - id: motion_01
    alias: Motion Detection - Hall Light on
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id: binary_sensor.motion_inkomhal
      to: 'on'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: switch.easyplus
          state: 'on'
        - entity_id: binary_sensor.inkomhal_occupied
          condition: state
          state: 'on'
        - condition: template
          value_template: "{{ states.sensor.period_of_day.state != 'day' }}"
        - condition: state
          entity_id: automation.auto_off_day
          state: 'off'
    action:
    - service: timer.start
      entity_id: timer.inkomhal_motion
    - service: homeassistant.turn_on
      entity_id: switch.light_vestiare

  - id: motion_02
    alias: Motion Detection - Hall Light off
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id:  binary_sensor.inkomhal_occupied
      to: 'off'
    action:
    - service: homeassistant.turn_off
      entity_id:  switch.light_vestiare
    - service: timer.cancel
      data:
        entity_id: timer.inkomhal_motion

  - id: motion_03
    alias: Motion Detection - Dinner Light on
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id: binary_sensor.motion_eetkamer
      to: 'on'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: switch.easyplus
          state: 'on'
        - condition: template
          value_template: "{{ states.sensor.period_of_day.state != 'day' }}"
        - condition: state
          entity_id: automation.auto_off_day
          state: 'off'
    action:
    - service: homeassistant.turn_on
      entity_id: switch.light_eetkamer_center
    - service: timer.start
      entity_id: timer.eetkamer_occupied


  - id: motion_dinner_off
    alias: Motion Detection - Dinner Light off
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id:  binary_sensor.eetkamer_occupied
      to: 'off'
    action:
    - service: homeassistant.turn_off
      entity_id: switch.light_eetkamer_center
    - service: timer.cancel
      data:
        entity_id: timer.eetkamer_occupied


  - id: motion_04
    alias: Motion Detection - Bad Light on
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id: binary_sensor.motion_badkamer
      to: 'on'
    condition:
       condition: and
       conditions:
        - condition: state
          entity_id: switch.easyplus
          state: 'on'
        - condition: template
          value_template: "{{ states.sensor.period_of_day.state != 'day' }}"
        - condition: state
          entity_id: automation.auto_off_day
          state: 'off'
    action:
    - service: homeassistant.turn_on
      entity_id: switch.light_badkamer_spiegel

  - id: motion_05
    alias: Motion Detection - Bad Light off
    initial_state: 'true'
    trigger:
    - platform: state
      entity_id:  binary_sensor.motion_badkamer
      to: 'off'
      for: '00:03:00'
    action:
    - service: homeassistant.turn_off
      entity_id: switch.light_badkamer_spiegel

  - id: motion_trap_on
    initial_state: 'true'
    alias: Motion Detection - Trap Light on
    trigger:
    - platform: state
      entity_id: binary_sensor.motion_traphal
      to: 'on'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: switch.easyplus
          state: 'on'
        - condition: state
          entity_id: automation.auto_off_day
          state: 'off'
        - condition: template
          value_template: "{{ states.sensor.period_of_day.state != 'day' }}"
    action:
    - service: homeassistant.turn_on
      entity_id: group.trap_light

  - id: motion_06
    initial_state: 'true'
    alias: Motion Detection - Trap Light off
    trigger:
    - platform: state
      entity_id:  binary_sensor.motion_traphal
      to: 'off'
      for: '00:00:15'
    action:
    - service: homeassistant.turn_off
      entity_id: group.trap_light

  - id: motion_07
    initial_state: 'true'
    alias: Motion Detection - WC off
    trigger:
    - platform: state
      entity_id: binary_sensor.motion_wc
      to: 'off'
      for: '00:01:00'
    action:
    - service: homeassistant.turn_off
      entity_id: switch.light_wc
