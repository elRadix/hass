---
input_datetime:
  meter:
    has_date: true
    has_time: true
  current_gas:
    has_date: true
    has_time: true
  current_water:
    has_date: true
    has_time: true
  current_e_day:
    has_date: true
    has_time: true
  current_e_night:
    has_date: true
    has_time: true

input_text:
#  energyid_gas:
#    name: "gas"
#    initial: "6f190ba2-247d-4c86-9019-bb67ed023eb1"
#  energyid_water:
#    name: "water"
#    initial: "c66a0c47-4937-4d76-b650-658588900b66"
#  energyid_e_day:
#    name: "current_day"
#    initial: "9677c2f3-5eff-431c-9423-a9ac8f3e9d82"
#  energyid_e_night:
#    name: "current_night"
#    initial: "234731ea-0276-4d3c-a9c9-9d333ec0d189"
  current_gas:
    name: "current_gas"
  current_water:
    name: "current_water"
  current_e_day:
    name: "current_e_day"
  current_e_night:
    name: "current_e_night"
  current_date_gas:
    name: "current_date_gas"
  current_date_water:
    name: "current_date_water"
  current_date_e_day:
    name: "current_date_e_day"
  current_date_e_night:
    name: "current_date_e_night"

input_number:
  energyid_gas_current:
    name: gas current
    icon: mdi:counter
    # initial: 5770
    min: 5770
    max: 65000
    step: 0.001
    mode: box
  energyid_water_current:
    name: water current
    icon: mdi:counter
    # initial: 821
    min: 821
    max: 12000
    step: 0.001
    mode: box
  energyid_e_day_current:
    name: day current
    icon: mdi:counter
    # initial: 14284
    min: 14284
    max: 17000
    step: 0.001
    mode: box
  energyid_e_night_current:
    name: night current
    icon: mdi:counter
    # initial: 16849
    min: 16848
    max: 18500
    step: 0.001
    mode: box

sensor:
  - platform: template
    sensors:
     consumption_water:
       friendly_name: Verbruik water
       value_template: "{{ (states('sensor.current_water')|float - states('sensor.baseline_water')|float)|round(1) }}"
       unit_of_measurement: 'm3'
  - platform: template
    sensors:
      consumption_gas:
        friendly_name: Verbruik gas
        value_template: "{{ (states('sensor.current_gas')|float - states('sensor.baseline_gas')|float)|round(1) }}"
        unit_of_measurement: 'm3'
  - platform: template
    sensors:
      consumption_day:
        friendly_name: Verbruik dag
        value_template: "{{ (states('sensor.current_e_day')|float - states('sensor.baseline_e_day')|float)|round(1) }}"
        unit_of_measurement: 'kWh'
  - platform: template
    sensors:
      consumption_night:
        friendly_name: Verbruik nacht
        value_template: "{{ (states('sensor.current_e_night')|float - states('sensor.baseline_e_night')|float)|round(1) }}"
        unit_of_measurement: 'kWh'
  - platform: template
    sensors:
      consumption_power:
        friendly_name: Verbruik energie
        value_template: "{{ (states('sensor.consumption_day')|float + states('sensor.consumption_night')|float) |round(2)}}"
        unit_of_measurement: 'kWh'


  - platform: template
    sensors:
     cost_water:
       friendly_name: water
       value_template: "{{ (states('sensor.consumption_water')|float * 3.9) |round(2) }}"
       unit_of_measurement: 'eur'
  - platform: template
    sensors:
     cost_water_monthly:
       friendly_name: cost water monthly
       value_template: "{{ (states('sensor.cost_water') / states('sensor.month_water')|float) |round(2) }}"
       unit_of_measurement: 'eur'
  - platform: template
    sensors:
      cost_gas:
        friendly_name: gas
        value_template: >-
            {% set c = states('sensor.consumption_gas')|float %}
            {{ (((c  * 10.15) * 0.0674190647482014)|float |round(2)) }}
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
     cost_water_monthly:
       friendly_name: cost gas monthly
       value_template: "{{ (states('sensor.cost_gas') / states('sensor.month_power')|float) |round(2) }}"
       unit_of_measurement: 'eur'

  - platform: template
    sensors:
      cost_day:
        friendly_name: cost day
        value_template: "{{ (states('sensor.consumption_day') | float * 0.26574780058651 |round(1) ) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      cost_night:
        friendly_name: cost night
        value_template: "{{ (states('sensor.consumption_night') | float * 0.265747800586511 |round(1) ) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      cost_power:
        friendly_name: cost power
        value_template: "{{ (states('sensor.consumption_power') | float * 0.265747800586511 |round(1) ) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      cost_electricity:
        friendly_name: cost electricity
        value_template: "{{ (states('sensor.cost_day')|float + states('sensor.cost_night')|float) |round(2) }}"  # "{{ (states('sensor.cost_day')|float + states('sensor.cost_night')|float) / 12|round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      cost_power_year:
        friendly_name: cost power year
        value_template: "{{ (states('sensor.cost_electricity')|float + states('sensor.cost_gas')|float) |round(2)}}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      cost_power_month:
        friendly_name: cost power monthly
        value_template: "{{ (states('sensor.cost_power_year')|float / states('sensor.month_power')|float) |round(2) }}"
        unit_of_measurement: 'eur'
  - platform: template
    sensors:
      cost_power_month_v1:
        friendly_name: cost power monthly v1
        value_template: "{{ (states('sensor.cost_power')|float / states('sensor.month_power')|float) |round(2) }}"
        unit_of_measurement: 'eur'

  - platform: template
    sensors:
      month_power:
        friendly_name: month power
        value_template: >-
            {% set date = 'January 2019' %}
            {% set date = strptime(date, '%B %Y') %}
            {% set today = now() %}
            {{ today.year*12+today.month - (date.year*12+date.month) - 1 }}
  - platform: template
    sensors:
      month_water:
        friendly_name: month water
        value_template: >-
            {% set date = 'December 2018' %}
            {% set date = strptime(date, '%B %Y') %}
            {% set today = now() %}
            {{ today.year*12+today.month - (date.year*12+date.month) - 1 }}


rest_command:
  post_energyid_gas:
    url: !secret post_energyid_gas
    method: POST
    payload: '{"meterId": "6f190ba2-247d-4c86-9019-bb67ed023eb1", "data": [["{{ states.input_datetime.current_gas.state }}", {{ states.input_number.energyid_gas_current.state }}]]}'
    content_type: application/json
    verify_ssl: true
  post_energyid_water:
    url:  !secret post_energyid_water
    method: POST
    payload: '{"meterId": "c66a0c47-4937-4d76-b650-658588900b66", "data": [["{{ states.input_datetime.current_water.state }}", {{ states.input_number.energyid_water_current.state }}]]}'
    content_type: application/json
    verify_ssl: true
  post_energyid_e_day:
    url: !secret post_energyid_e_day
    method: POST
    payload: '{"meterId": "9677c2f3-5eff-431c-9423-a9ac8f3e9d82", "data": [["{{ states.input_datetime.current_e_day.state }}", {{ states.input_number.energyid_e_day_current.state }}]]}'
    content_type: application/json
    verify_ssl: true
  post_energyid_e_night:
    url: !secret post_energyid_e_night
    method: POST
    payload: '{"meterId": "234731ea-0276-4d3c-a9c9-9d333ec0d189", "data": [["{{ states.input_datetime.current_e_night.state }}", {{ states.input_number.energyid_e_night_current.state }}]]}'
    content_type: application/json
    verify_ssl: true

automation:
  - id: energyid_01
    alias: post energyid gas
    trigger:
    - platform: state
      entity_id: input_number.energyid_gas_current
    action:
    - service: input_datetime.set_datetime
      entity_id: input_datetime.current_gas
      data_template:
        datetime: "{{ utcnow() }}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.current_gas
        value: "{{ states('input_number.energyid_gas_current') }}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.date_current_gas
        value: "{{ states('input_datetime.current_gas') }}"
    - service: python_script.set_state
      data_template:
        entity_id: sensor.current_gas
        state: "{{ states('input_text.current_gas') }}"
        unit_of_measurement: 'm3'
        icon: mdi:counter
        date: "{{ states.input_datetime.current_gas.state }}"
        source: https://www.energieid.be
    - service: rest_command.post_energyid_gas

  - id: energyid_02
    alias: post energyid water
    trigger:
    - platform: state
      entity_id: input_number.energyid_water_current
    action:
    - service: input_datetime.set_datetime
      entity_id: input_datetime.current_water
      data_template:
        datetime: "{{ utcnow() }}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.current_water
        value: "{{ states('input_number.energyid_water_current') }}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.date_current_water
        value: "{{ states('input_datetime.current_water') }}"
    - service: python_script.set_state
      data_template:
        entity_id: sensor.current_water
        state: "{{ states('input_text.current_water') }}"
        unit_of_measurement: 'm3'
        icon: mdi:counter
        date:  "{{ states.input_datetime.current_water.state }}"
        source: https://www.energieid.be
    - service: rest_command.post_energyid_water

  - id: energyid_03
    alias: post energyid e day
    trigger:
    - platform: state
      entity_id: input_number.energyid_e_day_current
    action:
    - service: input_datetime.set_datetime
      entity_id: input_datetime.current_e_day
      data_template:
        datetime: "{{ utcnow() }}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.current_e_day
        value: "{{ states('input_number.energyid_e_day_current') }}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.date_current_e_day
        value: "{{ states('input_datetime.current_e_day') }}"
    - service: python_script.set_state
      data_template:
        entity_id: sensor.current_e_day
        state: "{{ states('input_text.current_e_day') }}"
        unit_of_measurement: 'kWh'
        icon: mdi:counter
        date: "{{ states.input_datetime.current_e_day.state }}"
        source: https://www.energieid.be
    - service: rest_command.post_energyid_e_day

  - id: energyid_04
    alias: post energyid e night
    trigger:
    - platform: state
      entity_id: input_number.energyid_e_night_current
    action:
    - service: input_datetime.set_datetime
      entity_id: input_datetime.current_e_night
      data_template:
        datetime: "{{ utcnow() }}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.current_e_night
        value: "{{ states('input_number.energyid_e_night_current') }}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.date_current_e_night
        value: "{{ states('input_datetime.current_e_night') }}"
    - service: python_script.set_state
      data_template:
        entity_id: sensor.current_e_night
        state: "{{ states('input_text.current_e_night') }}"
        unit_of_measurement: 'kWh'
        icon: mdi:counter
        date: "{{ states.input_datetime.current_e_night.state }}"
        source: https://www.energieid.be
    - service: rest_command.post_energyid_e_night

  - id: energyid_05
    initial_state: 'true'
    alias: update baseline and current energie meters
    trigger:
      platform: homeassistant
      event: start
    action:
    - service: python_script.set_state
      data_template:
        entity_id: sensor.mega
        state: January 2019
        unit_of_measurement: 'eur'
        Start date: 31/01/2019
    - service: python_script.set_state
      data_template:
        entity_id: sensor.budget_power_monthly
        state: 70.29
        unit_of_measurement: 'eur'
        icon: mdi:counter
        Start date: 31/01/2019
    - service: python_script.set_state
      data_template:
        entity_id: sensor.budget_water_monthly
        state: 27.33
        unit_of_measurement: 'eur'
        icon: mdi:counter
        Start date: 11/03/2019
    - service: python_script.set_state
      data_template:
        entity_id: sensor.baseline_gas
        state: 5612.36
        unit_of_measurement: 'm3'
        icon: mdi:counter
        Snapshot date: 31/01/2019
    - service: python_script.set_state
      data_template:
        entity_id: sensor.baseline_water
        unit_of_measurement: 'm3'
        icon: mdi:counter
        state: 767
        Snapshot date: 31/01/2019
    - service: python_script.set_state
      data_template:
        entity_id: sensor.baseline_e_day
        state: 13915.6
        unit_of_measurement: 'kWh'
        icon: mdi:counter
        Snapshot date: 31/01/2019
    - service: python_script.set_state
      data_template:
        entity_id: sensor.baseline_e_night
        unit_of_measurement: 'kWh'
        icon: mdi:counter
        state: 16218.9
        Snapshot date: 31/01/2019
    - service: python_script.set_state
      data_template:
        entity_id: sensor.current_e_night
        state: "{{ states('input_text.current_e_night') }}"
        unit_of_measurement: 'kWh'
        icon: mdi:counter
        date: "{{ states.input_text.date_current_e_night.state }}"
        source: https://www.energieid.be
    - service: python_script.set_state
      data_template:
        entity_id: sensor.current_e_day
        state: "{{ states('input_text.current_e_day') }}"
        unit_of_measurement: 'kWh'
        icon: mdi:counter
        date: "{{ states.input_text.date_current_e_day.state }}"
        source: https://www.energieid.be
    - service: python_script.set_state
      data_template:
        entity_id: sensor.current_water
        state: "{{ states('input_text.current_water') }}"
        unit_of_measurement: 'm3'
        icon: mdi:counter
        date:  "{{ states.input_text.date_current_water.state }}"
        source: https://www.energieid.be
    - service: python_script.set_state
      data_template:
        entity_id: sensor.current_gas
        state: "{{ states('input_text.current_gas') }}"
        unit_of_measurement: 'm3'
        icon: mdi:counter
        date: "{{ states.input_text.date_current_gas.state }}"
        source: https://www.energieid.be
